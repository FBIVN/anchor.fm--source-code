class HttpStatusError extends Error {
    constructor(statusCode, ...args) {
        super(...args);
        this.statusCode = statusCode || 500;
        Error.captureStackTrace(this, HttpStatusError);
    }

    static handleHttpError(err, res) {
        const isHttpStatusError = err instanceof HttpStatusError;
        const statusCode = isHttpStatusError ? err.statusCode : 500;
        const message = isHttpStatusError && err.message ? err.message : null;

        if (res) {
            if (res.headersSent) {
                if (res.finished) {
                    console.trace('WARNING: HttpStatusError already finished response');
                } else {
                    console.trace('WARNING: HttpStatusError ending unfinished response');
                    res.end();
                }
            } else {
                if (message) {
                    res.status(statusCode).send(message);
                } else {
                    res.sendStatus(statusCode);
                }
            }
        }

        // only send error event if 5XX
        if (statusCode >= 500) {
            const req = (res && res.req) || {};
            const contextObj = {
                path: req.path,
                query: req.query,
                body: req.body,
                timestamp: new Date(),
            };
            ERR(err, contextObj);
        }
    }
}

module.exports = HttpStatusError;
